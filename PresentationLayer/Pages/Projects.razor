@page "/projects"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">Your Projects</MudText>
@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{
    <MudGrid Justify="Justify.FlexStart">
        @foreach (var item in projects)
        {
            <MudItem xs="4">
                <MudButton OnClick="@(async() => await NavigateToProject(@item.Id))">
                    <MudCard Outlined="true" Style="min-width: 250px; max-width: 250px; min-height: 250px; max-height: 250px;">
                        <MudCardHeader Style="max-height:50%;">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Style="display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2;  overflow: hidden;">
                                    @item.title
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@item.description</MudText>
                        </MudCardContent>
                        <MudCardActions Class="align-content-end">
                            <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="@(async () => await DeleteProject(@item.Id))">Delete</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Add team members</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudButton>
            </MudItem>
        }
    </MudGrid>
}

@code
{
    List<ProjectDTO>? projects { get; set; }
    private UserDTO? user { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }

    bool IsLoading { get; set; } = true;

    private async Task NavigateToProject(Guid projectId)
    {
        try
        {
            NavManager.NavigateTo("/projects/" + projectId.ToString());
        }
        catch (System.Exception e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }
      StateHasChanged();
    }


    public async Task<List<ProjectDTO>> GetEntitiesAsync(Guid userId)
    {
        // Retrieve entities from the database and return them
        var listOfProjects = await serviceManager.ProjectService.LoadProjectsAsync(userId);
        return listOfProjects;
    }

    public async Task DeleteProject(Guid projectId)
    {
        try
        {
            var response = await serviceManager.ProjectService.DeleteProject(projectId);
            
            if(response == Response.Deleted)
            {
                Snackbar.Add("Project was deleted", Severity.Success);
            }

            
        } 
        catch (System.Exception e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }

        NavManager.NavigateTo("/projects");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                projects = await GetEntitiesAsync(user.Id);

                // Store entities in the session storage
                await sessionStorage.SetItemAsync("Projects", projects);
                
                IsLoading = false;

                StateHasChanged();
            }

        }
    }
}

