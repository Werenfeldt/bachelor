@page "/projects"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">Your Projects</MudText>
@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{

    <MudGrid Justify="Justify.Center">

                    @foreach (var item in projects)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3" >
                            <MudCard Outlined="true" Class="justify-start">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@item.title</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2">@item.description</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary">Add team members</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                        <!-- Repeat this MudGridItem block for each card -->


                    @* <MudCard Outlined="true" Href="/">
                        <MudCardContent>
                            <MudText>@item.title</MudText>
                            <MudText Typo="Typo.body2">@item.description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Add users</MudButton>
                        </MudCardActions>
                    </MudCard> *@
                    }

    </MudGrid>
}

@code
{
    List<ProjectDTO>? projects { get; set; }
    private UserDTO? user { get; set; }

    bool IsLoading { get; set; } = true;


    public async Task<List<ProjectDTO>> GetEntitiesAsync(Guid userId)
    {
        // Retrieve entities from the database and return them
        var listOfProjects = await serviceManager.ProjectService.LoadProjectsAsync(userId);
        return listOfProjects;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                projects = await GetEntitiesAsync(user.Id);

                // Store entities in the session storage
                await sessionStorage.SetItemAsync("Projects", projects);
                
                IsLoading = false;

                StateHasChanged();
            }

        }
    }



    @* protected override async Task OnParametersSetAsync()
    {
        if(user != null)
        {
            projects = await serviceManager.ProjectService.LoadProjectsAsync(user.Id);
        }

        await base.OnParametersSetAsync();
    } *@

    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");
        projects = await serviceManager.ProjectService.LoadProjectsAsync(user.Id);
        StateHasChanged();
    }  *@
}

