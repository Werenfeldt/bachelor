@page "/editor/{testFileId:guid}"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">View the code, translation and documentation for @testFile.Name</MudText>
    <MudGrid>
    <MudItem xs="12" md="3">
        <MudTextField @bind-Value="@testContent" Label="Outlined" Variant="Variant.Outlined" @onchange="this.OnChange"></MudTextField>
        <MudText><b>Content:</b> @testFile.Content</MudText>
    </MudItem>
    <MudItem xs="12" md="9">
        <MudGrid>
        <MudItem xs="12" sm="12">
            <MudPaper>@testContent</MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudPaper>@testFile.Content</MudPaper>
        </MudItem>
        </MudGrid>
    </MudItem>
    </MudGrid>
}



@code
{
    private UserDTO? user { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }

    bool IsLoading { get; set; } = true;

    [Parameter]
    public Guid testFileId { get; set; }

    private TestFileDTO testFile { get; set; }

    private string testContent;
    public EventCallback<string> ValueChanged {get;set;}

    public async Task<TestFileDTO> GetTestFile(Guid testFileId)
    {
        return await serviceManager.ProjectService.LoadTestFileByIdAsync(testFileId);
    }

    private void OnChange(ChangeEventArgs e)
    {
        ValueChanged.InvokeAsync(e.Value.ToString());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                testFile = await GetTestFile(testFileId);

                // Store entities in the session storage
                await sessionStorage.SetItemAsync("TestFile", testFile);
                
                IsLoading = false;

                StateHasChanged();
            }

        }
    }
}

