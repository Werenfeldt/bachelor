@page "/editor/{testFileId:guid}"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">View the code, translation and documentation for @testFile.Name</MudText>
    <MudGrid>
        <MudItem xs="12" sm="6">
             <MudPaper Height="700px" Width="100%" Style="background-color: rgba(217, 217, 217, 1);">
                @* <MudTextField @bind-Value="@testContent" Label="Outlined" Variant="Variant.Outlined" @onchange="this.OnChange"></MudTextField> *@
                <MudStack Style="min-height:100%;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
                        <MudText Typo="Typo.h5">
                            Content:
                        </MudText>
                        <MudText Class="align-stretch">
                            @testFile.Content
                        </MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Large" OnClick="@(async () => await Translate())">Translate</MudButton>
                </MudStack>
             </MudPaper>
            
        </MudItem>
        <MudItem xs="12" sm="6">
             <MudPaper Height="70%" Width="100%" Style="background-color: rgba(217, 217, 217, 0.56)" Class="mb-2">
                <MudStack Style="min-height:70%;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h5">Steps: </MudText>
                        
                        @if(!Locked)
                        {
                            <MudIconButton OnClick="@(async () => await Save())" Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                        }
                        else 
                        {
                            <MudIconButton OnClick="@(() => StartEdit())" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                        }
                    </MudStack>
                    @if(documentation != null)
                    {
                        <MudInput Value="@documentation.Translation"  Disabled="@Locked" Lines="20" DisableUnderLine="true" />

                    }
                    else 
                    {
                        <MudInput Value="@("")"  Disabled="true" Lines="20" DisableUnderLine="true" />
                    }

                </MudStack>
                
             </MudPaper>
              <MudPaper Height="30%" Width="100%" Style="background-color: rgba(217, 217, 217, 0.56)">
                <MudStack Style="min-height:30%;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h5">Summary: </MudText>
                        @if(!Locked)
                        {
                            <MudIconButton OnClick="@(async () => await Save())" Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                        }
                        else 
                        {
                            <MudIconButton OnClick="@(() => StartEdit())" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                        }
                    </MudStack>
                    @if(documentation != null)
                    {
                        <MudInput Value="@documentation.Summary"  Disabled="@Locked" Lines="20" DisableUnderLine="true" />
                    }
                    else 
                    {
                        <MudInput Value="@("")"  Disabled="true" Lines="20" DisableUnderLine="true" />
                    }
                </MudStack>              
              </MudPaper>
        </MudItem>
    </MudGrid>
}



@code
{
    private UserDTO? user { get; set; }

    private DocumentationDTO? documentation { get; set; }

    [Inject] ISnackbar Snackbar { get; set; }

    //TODO lav to forskellige locked - en for summary og en for translation. 
      public bool Locked = true;

    bool IsLoading { get; set; } = true;

    [Parameter]
    public Guid testFileId { get; set; }

    private TestFileDTO testFile { get; set; }

    private string testContent;
    public EventCallback<string> ValueChanged {get;set;}

    public async Task<TestFileDTO> GetTestFile(Guid testFileId)
    {
        return await serviceManager.ProjectService.LoadTestFileByIdAsync(testFileId);
    }

    //TODO lav loader imens den translater. 
    public async Task Translate()
    {
        documentation = await serviceManager.TranslationService.translateTestfile(testFile);

        StateHasChanged();
    }

    private void StartEdit()
    {
        Locked = false;
    }

    private async Task Save()
    {
        //save

        Locked = true;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                testFile = await GetTestFile(testFileId);

                // Store entities in the session storage
                await sessionStorage.SetItemAsync("TestFile", testFile);
                
                IsLoading = false;

                StateHasChanged();
            }

        }
    }
}

