@page "/editor/{testFileId:guid}"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">Documentation for @testFile.Name</MudText>
    
    <MudContainer MaxWidth="MaxWidth.Large" Style="max-height:700px; min-height:700px;" >
        <MudStack Row="true">
            <MudContainer Style="width:50%; min-height:700px; max-height:700px;" Class="pr-1 pl-0">
                <MudPaper MaxHeight="100%" MaxWidth="100%" Style="background-color: rgba(251, 235, 212, 1); min-width=100%; min-height:700px;">
                    <MudStack Style="min-height:700px;" Justify="Justify.SpaceBetween" >
                            <MudText Typo="Typo.h5">
                                Content:  
                            </MudText>
                            <pre>
                                <code>
                                    @testFile.Content
                                </code>
                            </pre>

                            <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Large" OnClick="@(async () => await Translate())">Translate</MudButton>
                    </MudStack>
                </MudPaper>
            </MudContainer>
            <MudContainer Style="width:50%; min-height:700px; max-height:700px;" Class="pr-0 pl-1">
                    <MudStack Style="height:70%;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
                        <MudPaper Height="100%" Width="100%" Style="background-color: rgba(251, 235, 212, 0.56)" Class="mb-2">
                            <MudStack Justify="Justify.SpaceBetween">
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.h5">Steps: </MudText>
                                    @if(!TranslationLocked)
                                    {
                                        <MudIconButton OnClick="@(async () => await Save(false))" Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                                    }
                                    else
                                    {
                                        <MudIconButton OnClick="@(() => StartEdit(false))" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />    
                                    }
                                </MudStack>
                                @if(IsTranslating)
                                {
                                    <MudGrid>
                                        <MudItem Class="d-flex align-center justify-center mud-width-full">
                                            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                                        </MudItem>
                                    </MudGrid>
                                }
                                @if(documentation != null)
                                {
                                    <MudForm Model="@updateDocumentationDTO" @ref="form">
                                        <MudInput @bind-Value="updateDocumentationDTO.Translation" Disabled="@TranslationLocked" Lines="20" DisableUnderLine="true"  style="width: 100%;" />
                                    </MudForm>
                                }
                                else 
                                {
                                    <MudInput Value="@("")"  Disabled="true" Lines="20" DisableUnderLine="true" />
                                }
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                        
                    <MudStack Style="height:30%;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
                        <MudPaper Height="100%" Width="100%" Style="background-color: rgba(251, 235, 212, 0.56)">
                            <MudStack Justify="Justify.SpaceBetween">
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.h5">Summary: </MudText>
            
                                    @if(!SummaryLocked)
                                    {
                                        <MudIconButton OnClick="@(async () => await Save(true))" Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                                    }
                                    else 
                                    {
                                        <MudIconButton OnClick="@(() => StartEdit(true))" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Medium" />
                                    }
                                </MudStack>
                                @if(IsTranslating)
                                {
                                    <MudGrid>
                                        <MudItem Class="d-flex align-center justify-center mud-width-full">
                                            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                                        </MudItem>
                                    </MudGrid>
                                }
                                @if(documentation != null)
                                {
                                    <MudForm Model="@updateDocumentationDTO" @ref="form">
                                        <MudInput @bind-Value="updateDocumentationDTO.Summary"  Disabled="@SummaryLocked" Lines="20" DisableUnderLine="true"  style="width: 100%;" />
                                    </MudForm>
                                }
                                else 
                                {
                                    <MudInput Value="@("")"  Disabled="true" Lines="20" DisableUnderLine="true" />
                                }
                            </MudStack>
                        </MudPaper>
                    </MudStack>              
            </MudContainer>
        </MudStack>
    </MudContainer>
}



@code
{
    MudForm form;

    private DocumentationDTO? documentation { get; set; }

    private UpdateDocumentationDTO updateDocumentationDTO = new();

    [Inject] ISnackbar Snackbar { get; set; }

    public bool SummaryLocked { get; set; } = true;

    public bool TranslationLocked { get; set; } = true;

    bool IsLoading { get; set; } = true;

    bool IsTranslating { get; set; } = false;

    [Parameter]
    public Guid testFileId { get; set; }

    
    public TestFileDTO testFile { get; set; }


    public async Task GetTestFile(Guid testFileId)
    {   

        testFile = await serviceManager.ProjectService.LoadTestFileByIdAsync(testFileId);

        Console.WriteLine(testFile.Content);
        
    }
    public async Task GetDocumentation(Guid testFileId)
    {
        try
        {
            documentation = await serviceManager.ProjectService.LoadDocumentationByTestFilesIdAsync(testFileId);

            SetDocumentation();
        }
        catch (System.Exception)
        {   
            documentation = null;
        }
    }

    public void SetTranslating(bool StartTranslation)
    {
        if(StartTranslation)
        {
            documentation = null;
            IsTranslating = !IsTranslating;
            StateHasChanged();
        } 
        else 
        {
            IsTranslating = !IsTranslating;
        }
    }

    public async Task Translate()
    {
        SetTranslating(true);

        documentation = await serviceManager.TranslationService.TranslateTestfile(testFile);

        SetDocumentation();

        SetTranslating(false);
        StateHasChanged();
    }

    private void StartEdit(bool summary)
    {
        if(summary)
        {
            SummaryLocked = false;
        }
        else 
        {
            TranslationLocked = false;
        }
    }

    async Task Save(bool summary)
    {
        var response = await serviceManager.TranslationService.UpdateDocumentation(updateDocumentationDTO);

        if(response == Response.Updated)
        {
            Snackbar.Add("Documentation updated", Severity.Success);
        }
        //save
        if(summary)
        {
            SummaryLocked = true;
        }
        else 
        {
            TranslationLocked = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");
        
        Console.WriteLine("Inside Editor: " + testFileId.ToString());

        await GetTestFile(testFileId);

        await GetDocumentation(testFileId);

        IsLoading = false;

        StateHasChanged();
    }


    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                await GetTestFile(testFileId);

                await GetDocumentation(testFileId);
                
                IsLoading = false;

                StateHasChanged();
            }

        }
    } *@

    private void SetDocumentation()
    {
            updateDocumentationDTO.Id = documentation.Id;
            updateDocumentationDTO.TestFileId = documentation.TestFileId; 
            updateDocumentationDTO.Summary = documentation.Summary;
            updateDocumentationDTO.Translation = documentation.Translation;
    }
}

