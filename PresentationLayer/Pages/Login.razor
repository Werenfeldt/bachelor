@page "/login"
@layout MainLayout
@attribute [AllowAnonymous]
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudText Align="Align.Center" Typo="Typo.h2" > Login </MudText>
            <MudForm @ref="form" @bind-IsValid="@success">
                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @ref="email"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="password"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Password is required!"/>
                    <div class="d-flex align-center justify-space-between">       
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="@(async () => await LoginWithUser())">Login</MudButton>
                    </div>
                    Don't have an account? 
                    <MudButton Href="/createuser" Variant="Variant.Text" Color="Color.Primary" Class="ml-auto" Size="Size.Small"> Create New User</MudButton>
            </MudForm>   
        </MudPaper>
    </MudItem>
</MudGrid>





@code {
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;
    MudTextField<string> email;
    MudTextField<string> password;
    bool success;

    private async Task LoginWithUser()
    {
        try
        {
            var user = await serviceManager.LoginService.Login(email.Text, password.Text);
            await sessionStorage.SetItemAsync("SessionUser", user);
            NavManager.NavigateTo("/projects");

        }
        catch (UserNotFoundException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }
        
        StateHasChanged();
    }

}