@page "/download"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;
@inject IJSRuntime js;

@if (IsLoading)
{
    <MudGrid>
    <MudItem Class="d-flex align-center justify-center mud-width-full">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudItem>
</MudGrid>
}
else
{
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="7">
            <MudText Typo="Typo.h3" Align="Align.Center">Download project</MudText>
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudCard Outlined="true" class="rounded-xl" Justify="Justify.Center">
                <MudCardContent>
                    <MudSelect @bind-Value="projectToDownload" Label="Project" AnchorOrigin="Origin.BottomCenter" Required="true">
                        @foreach (var item in currentUsersProjects)
                            {
                                <MudSelectItem Value="@item">@item.title</MudSelectItem>
                            }
                        </MudSelect>

                        <MudPaper Elevation="2" Rounded="Round.Lg" Class="mt-4" Outlined="true">
                            <MudGrid>
                                <MudItem xs="12" md="4">
                                    <MudCheckBox @bind-Checked="@includeScript" Label="Script"></MudCheckBox>
                                </MudItem>
                                <MudItem xs="12" md="4">
                                    <MudCheckBox @bind-Checked="@includeTranslation" Label="Translation"></MudCheckBox>
                                </MudItem>
                                <MudItem xs="12" md="4">
                                    <MudCheckBox @bind-Checked="@includeSummary" Label="Summary"></MudCheckBox>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>

                    </MudCardContent>
                    <MudCardActions Class="pl-4 pr-4 pt-0">
                        <MudButton FullWidth="true" Variant="Variant.Filled"
                        Color="Color.Primary" Disabled="@(!success || !HasCheckedBoxes())" @onclick="DownloadPDF">
                            Download
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudForm>
}

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    bool IsLoading = true;
    MudForm form;
    bool success;
    string[] errors = { };
    List<ProjectDTO>? currentUsersProjects { get; set; }
    ProjectDTO? projectToDownload { get; set; }
    bool includeScript = false;
    bool includeTranslation = false;
    bool includeSummary = false;

    public void DownloadPDF()
    {
        try
        {
            serviceManager.ExportService.SaveAsPDF(js, projectToDownload,includeScript, includeTranslation, includeSummary);
            StateHasChanged();
        }
        catch (System.Exception)
        {
            Snackbar.Add("Could not download", Severity.Warning);
        }
    }
    void OnValidSubmit()
    {
        success = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                currentUsersProjects = await serviceManager.ProjectService.LoadProjectsAsync(user.Id);

                IsLoading = false;

                StateHasChanged();
            }

        }
    }
    bool HasCheckedBoxes()
    {
        return includeScript || includeTranslation || includeSummary;
    }
}