@page "/createproject"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject NavigationManager NavManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<MudForm @ref="form" @bind-IsValid="@success">
    <EditForm Model="@projectDTO" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudText Typo="Typo.h3" Align="Align.Center">Add project</MudText>
            </MudItem>
            <MudItem xs="12" sm="7">
                <MudCard Outlined="true" class="rounded-xl" Justify="Justify.Center">
                    <MudCardContent>
                        <MudTextField Label="Project Title" Required="true" @bind-Value="projectDTO.Title"
                            For="@(() => projectDTO.Title)" />
                        <MudTextField Label="Project Description" @bind-Value="projectDTO.Description"
                            For="@(() => projectDTO.Description)" />
                        <MudTextField Label="GitHub URL" Required="true" Class="mt-3" @bind-Value="projectDTO.GitUrl"
                            For="@(() => projectDTO.GitUrl)" />
                        <MudField Label="Repository is:" Variant="Variant.Text" InnerPadding="false">
                            <MudRadioGroup @bind-SelectedOption="repositoryIsPrivate">
                                <MudRadio Option="false" Color="Color.Primary" Dense="false">Public</MudRadio>
                                <MudRadio Option="true" Color="Color.Primary" Dense="false">Private</MudRadio>
                            </MudRadioGroup>
                        </MudField>
                        @if (repositoryIsPrivate)
                        {
                            <MudField Label="Get access with:" Variant="Variant.Text" InnerPadding="false">
                                <MudRadioGroup @bind-SelectedOption="accessWithAuthenticationToken">
                                    <MudRadio Option="true" Color="Color.Primary" Dense="false">
                                        Authentication Token</MudRadio>
                                    <MudRadio Option="false" Color="Color.Primary" Dense="false">Username & Password
                                    </MudRadio>
                                </MudRadioGroup>
                            </MudField>
                            if (accessWithAuthenticationToken)
                            {
                                <MudTextField T="string" Label="Token" @ref="token" Required="true"
                            RequiredError="Token is required!" />
                            }
                            else
                            {
                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField T="string" Label="Username" @ref="username" Required="true"
                            RequiredError="Username is required!" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField T="string" Label="Password" @ref="password" InputType="InputType.Password" Required="true"
                            RequiredError="Password is required!" />
                                    </MudItem>
                                </MudGrid>
                            }
                        }

                    </MudCardContent>
                    <MudCardActions Class="pl-4 pr-4 pt-0">
                        <MudButton FullWidth="true" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)">Create Project</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudForm>

<MudOverlay Visible="@IsTranslating" LightBackground="true">
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudText>"Importing testfiles from GitHub"</MudText>
        </MudItem>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
</MudOverlay>

@code {

    [Inject] IConfiguration _config { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;
    CreateProjectDTO projectDTO = new CreateProjectDTO();
    bool success;
    bool repositoryIsPrivate = false;
    bool accessWithAuthenticationToken = true;
    bool IsTranslating { get; set; } = false;
    MudTextField<string> username;
    MudTextField<string> password;
    MudTextField<string> token;

    private async Task OnValidSubmit()
    {
        IsTranslating = true;

        var navigationURL = "/projects/";
        ProjectDTO projectForNavigation;

        try
        {
            if (repositoryIsPrivate)
            {
                projectForNavigation = accessWithAuthenticationToken ? 
                    await serviceManager.ProjectService.CreateProjectAsync(projectDTO, token.Text) : 
                    await serviceManager.ProjectService.CreateProjectAsync(projectDTO, username.Text, password.Text);
            }
            else
            {
                var gitAuthToken = _config["APIToken:GithubIntegrationToken"];
                projectForNavigation = await serviceManager.ProjectService.CreateProjectAsync(projectDTO, gitAuthToken);

            }

            NavManager.NavigateTo(navigationURL + projectForNavigation.Id);
        }
        catch (GitHubRequestException requestError)
        {
            Snackbar.Add(requestError.Message, Severity.Warning);
        }
        catch (System.Exception e)
        {
            Snackbar.Add("The authentication failed, or the GitHub repository does not exist.", Severity.Warning);
            Console.WriteLine("----------------------");
            Console.WriteLine(e);
            Console.WriteLine("----------------------");
        }
        IsTranslating = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");
        projectDTO.UserId = user.Id;
        StateHasChanged();
    }
}