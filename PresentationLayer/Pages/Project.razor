@page "/projects/{projectId:guid}"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">TestFiles for Projects: </MudText>
@if (IsLoading)
{
    <MudGrid>
    <MudItem Class="d-flex align-center justify-center mud-width-full">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudItem>
</MudGrid>
}
else
{

    <MudOverlay Visible="@IsTranslating" LightBackground="true">
        <MudGrid>
            <MudItem Class="d-flex align-center justify-center mud-width-full">
                <MudText>@FileBeingTranslated</MudText>
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" />
            </MudItem>
            <MudItem Class="d-flex align-center justify-center mud-width-full">
                <MudProgressCircular Color="Color.Secondary" Value="@Progress" Size="Size.Large" />
            </MudItem>
        </MudGrid>
    </MudOverlay>

    <MudGrid Justify="Justify.Center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await TranslateAllTestFiles())">
            Generate Documentation For All Testfiles</MudButton>
    </MudGrid>
    <MudGrid Justify="Justify.FlexStart" Class="mt-5">
        @foreach (var item in testfiles)
        {
            <MudItem xs="6">
                <MudButton OnClick="@(async() => await NavigateToEditor(@item.Id))" Variant="Variant.Outlined" Style="min-width: 100%; max-width: 100%; min-height: 200px; max-height: 200px;">
                        <MudStack Justify="Justify.FlexStart" Style="min-height: 200px; max-height: 200px"  >
                        
                                    <u>
                                        <MudText Typo="Typo.h6" Class="mt-2" Style="display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 1;  overflow: hidden;">
                                            @item.Name
                                        </MudText>
                                    </u>
                                    <MudText Style="display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 5;  overflow: hidden;">
                                            @item.Documentation.Summary
                                    </MudText>

                        </MudStack>
                </MudButton>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Inject] ISnackbar Snackbar { get; set; }

    [Parameter]
    public Guid projectId { get; set; }

    List<TestFileWithDocumentationDTO>? testfiles { get; set; }

    bool IsLoading { get; set; } = true;

    bool IsTranslating { get; set; } = false;

    string? FileBeingTranslated { get; set; }

    int Progress { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            testfiles = await GetTestFilesAsync();

            IsLoading = false;

            StateHasChanged();
        }
        catch (TestFileDoesNotExistException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }
    }

    private async Task<List<TestFileWithDocumentationDTO>> GetTestFilesAsync()
    {

        return await serviceManager.ProjectService.LoadTestFilesForProjectAsync(projectId);
    }

    private async Task NavigateToEditor(Guid testFileId)
    {
        try
        {
            NavManager.NavigateTo("/editor/" + testFileId.ToString());
        }
        catch (System.Exception e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }
        StateHasChanged();
    }

    private async Task TranslateAllTestFiles()
    {
        try
        {
            IsTranslating = true;

            Progress = 0;
            var ValueToIncrease = 100 / testfiles.Count;

            foreach (var test in testfiles)
            {
                FileBeingTranslated = "Translating: " + test.Name + "...";
                Progress += ValueToIncrease;
                await serviceManager.TranslationService.TranslateTestfile(test.Id);

                StateHasChanged();
            }

        }
        catch (TranslationException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);

        } 
        finally
        {

            testfiles = await GetTestFilesAsync();

            IsTranslating = false;
            StateHasChanged();
        }
    }
}