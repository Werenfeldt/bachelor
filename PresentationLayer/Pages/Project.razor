@page "/projects/{projectId:guid}"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">TestFiles for Projects: </MudText>
@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{

    <MudOverlay Visible="@IsTranslating" LightBackground="true">
        <MudGrid>
            <MudItem Class="d-flex align-center justify-center mud-width-full">
                <MudText>@FileBeingTranslated</MudText>
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" />
            </MudItem>
            <MudItem Class="d-flex align-center justify-center mud-width-full">
                <MudProgressCircular Color="Color.Secondary" Value="@Value" Size="Size.Large" />
            </MudItem>
        </MudGrid>
    </MudOverlay>
    
    <MudGrid Justify="Justify.Center">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(async () => await TranslateAllTestFiles())">Translate All Testfiles</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Update Translations</MudButton>
    </MudGrid>
    <MudGrid Justify="Justify.FlexStart">
        @foreach (var item in testfiles)
        {
            <MudItem xs="2">
                <MudButton OnClick="@(async() => await NavigateToEditor(@item.Id))">
                    <MudPaper Outlined="true" Style="min-width: 150px; max-width: 150px; min-height: 150px; max-height: 150px;">
                    <MudStack  Style="min-height:150px;" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudStack Row="true" Style="max-height:30%;">
                                    <MudText Typo="Typo.h6" Style="display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2;  overflow: hidden;">
                                        @item.Name 
                                    </MudText>
                            </MudStack>
                    </MudStack>
                    </MudPaper>
                </MudButton>
            </MudItem>
        }
    </MudGrid> 
}

@code {
    [Inject] ISnackbar Snackbar { get; set; }

    [Parameter]
    public Guid projectId { get; set; }

    public List<TestFileDTO>? testfiles { get; set; }

    bool IsLoading { get; set; } = true;

    bool IsTranslating { get; set; } = false;

    string FileBeingTranslated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        testfiles = await GetTestFilesAsync();

        IsLoading = false;

        StateHasChanged();

    }

    public async Task<List<TestFileDTO>> GetTestFilesAsync()
    {
        // Retrieve entities from the database and return them
        var listOfTestfiles = await serviceManager.ProjectService.LoadTestFilesForProjectAsync(projectId);
        return listOfTestfiles;
    }

    private async Task NavigateToEditor(Guid testFileId){
        try
        {
            NavManager.NavigateTo("/editor/" + testFileId.ToString());
            //NavManager.NavigateTo("/projects/" + projectId.ToString());
        }
        catch (System.Exception e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }
      StateHasChanged();
    }

    public async Task TranslateAllTestFiles()
    {
        IsTranslating = true;
        

        Value = 0;
        var ValuetoIncrease = 100/testfiles.Count;

            
            foreach (var test in testfiles)
            {
                FileBeingTranslated = "Translating: " + test.Name + "...";
                Value += ValuetoIncrease;
                await serviceManager.TranslationService.TranslateTestfile(test);
                
                StateHasChanged();
            }

        IsTranslating = false;
        StateHasChanged();
    }

    public int Value { get; set; }

	public async void SimulateProgress()
	{
		Value = 0;
		do
		{
			if (_disposed)
			{
				return;
			}

			Value += 4;
			StateHasChanged();
			await Task.Delay(500);

		} while (Value < 100);

		SimulateProgress();
	}

	bool _disposed;
	public void Dispose() => _disposed = true;
}