@page "/projects/{projectId:guid}"
@layout MainLayout
@inject IServiceManager serviceManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavManager;

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">TestFiles for Projects: </MudText>
@if(IsLoading)
{
    <MudGrid>
        <MudItem Class="d-flex align-center justify-center mud-width-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else 
{

    <MudGrid Justify="Justify.FlexStart">
        @foreach (var item in testfiles)
        {
            <MudItem xs="2"  >
                <MudButton OnClick="@(async() => await NavigateToEditor(@item.Id))">
                    <MudCard Outlined="true" Style="min-width: 150px; max-width: 150px; min-height: 150px; max-height: 150px;">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Style="display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 1;  overflow: hidden;">
                                    @item.Name
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@item.Path</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudButton>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Inject] ISnackbar Snackbar { get; set; }

    [Parameter]
    public Guid projectId { get; set; }

    public List<TestFileDTO>? testfiles { get; set; }

    bool IsLoading { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        testfiles = await GetTestFilesAsync();

        IsLoading = false;

        StateHasChanged();

        //await base.OnParametersSetAsync();
    }

        public async Task<List<TestFileDTO>> GetTestFilesAsync()
    {
        // Retrieve entities from the database and return them
        var listOfTestfiles = await serviceManager.ProjectService.LoadTestFilesForProjectAsync(projectId);
        return listOfTestfiles;
    }

    private async Task NavigateToEditor(Guid testFileId){
        try
        {
            NavManager.NavigateTo("/editor/" + testFileId.ToString());
            //NavManager.NavigateTo("/projects/" + projectId.ToString());
        }
        catch (System.Exception e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }
      StateHasChanged();
    }
    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsLoading = false;
            // Retrieve user from the session storage
            var user = await sessionStorage.GetItemAsync<UserDTO>("SessionUser");

            // If the user is set, retrieve entities from the database
            if (user != null)
            {
                testfiles = await GetTestFilesAsync();
                
                IsLoading = false;

                StateHasChanged();
            }
        }
    } *@
}